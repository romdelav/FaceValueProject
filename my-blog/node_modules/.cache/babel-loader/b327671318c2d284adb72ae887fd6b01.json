{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Software Development\\\\React\\\\my-blog\\\\src\\\\components\\\\Tweets\\\\Tweets.jsx\";\nimport React, { Component } from 'react';\nimport TweetsSingle from './TweetsSingle';\n\nconst needle = require('needle');\n\nrequire('dotenv').config({\n  path: 'src/.env'\n});\n\nconst token = process.env.BEARER_TOKEN;\nconst endpointURL = 'https://api.twitter.com/2/tweets/search/recent';\n\nasync function getRequest() {\n  const params = {\n    'query': 'facial recognition'\n  };\n  const res = await needle('get', endpointURL, params, {\n    headers: {\n      \"authorization\": `Bearer ${token}`\n    }\n  });\n\n  if (res.body) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"res.body\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  } else {\n    throw new Error('Unsuccessful request');\n  }\n}\n\n(async () => {\n  try {\n    // Make request\n    const response = await getRequest();\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this); //console.log(response)\n  } catch (e) {\n    console.log(e);\n    process.exit(-1);\n  }\n\n  process.exit();\n})();\n/*\r\nclass Tweets extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tweets: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = 'https://api.twitter.com/2/tweets/search/recent?query=facialrecognition';\r\n        fetch(url, {mode: 'no-cors'})\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                this.setState({\r\n                    tweets: data.data\r\n                })\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    renderItems() {\r\n        return this.state.tweets.map((item) => (\r\n            <TweetsSingle key={item.id} item={item} />\r\n        ));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <ul>\r\n                {this.renderItems()}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n*/","map":{"version":3,"sources":["E:/Software Development/React/my-blog/src/components/Tweets/Tweets.jsx"],"names":["React","Component","TweetsSingle","needle","require","config","path","token","process","env","BEARER_TOKEN","endpointURL","getRequest","params","res","headers","body","Error","response","e","console","log","exit"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,CAAyB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAzB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,YAA1B;AAEA,MAAMC,WAAW,GAAG,gDAApB;;AAEA,eAAeC,UAAf,GAA4B;AAExB,QAAMC,MAAM,GAAG;AACX,aAAS;AADE,GAAf;AAIA,QAAMC,GAAG,GAAG,MAAMX,MAAM,CAAC,KAAD,EAAQQ,WAAR,EAAqBE,MAArB,EAA6B;AACjDE,IAAAA,OAAO,EAAE;AACL,uBAAkB,UAASR,KAAM;AAD5B;AADwC,GAA7B,CAAxB;;AAMA,MAAIO,GAAG,CAACE,IAAR,EAAc;AACV,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAJD,MAIO;AACH,UAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH;AACJ;;AAED,CAAC,YAAW;AAER,MAAI;AACA;AACA,UAAMC,QAAQ,GAAG,MAAMN,UAAU,EAAjC;AACA,wBACI;AAAA,gBAAKM;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,CAHA,CAMA;AAEH,GARD,CAQE,OAAOC,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAX,IAAAA,OAAO,CAACc,IAAR,CAAa,CAAC,CAAd;AACH;;AACDd,EAAAA,OAAO,CAACc,IAAR;AACH,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {Component} from 'react';\r\nimport TweetsSingle from './TweetsSingle';\r\n\r\nconst needle = require('needle');\r\nrequire('dotenv').config({ path: 'src/.env' });\r\nconst token = process.env.BEARER_TOKEN;\r\n\r\nconst endpointURL = 'https://api.twitter.com/2/tweets/search/recent'\r\n\r\nasync function getRequest() {\r\n\r\n    const params = {\r\n        'query': 'facial recognition'\r\n    }\r\n\r\n    const res = await needle('get', endpointURL, params, {\r\n        headers: {\r\n            \"authorization\": `Bearer ${token}`\r\n        }\r\n    })\r\n\r\n    if (res.body) {\r\n        return(\r\n            <h1>res.body</h1>\r\n        )\r\n    } else {\r\n        throw new Error('Unsuccessful request')\r\n    }\r\n}\r\n\r\n(async() => {\r\n\r\n    try {\r\n        // Make request\r\n        const response = await getRequest();\r\n        return(\r\n            <h1>{response}</h1>\r\n        )\r\n        //console.log(response)\r\n\r\n    } catch (e) {\r\n        console.log(e);\r\n        process.exit(-1);\r\n    }\r\n    process.exit();\r\n})();\r\n\r\n/*\r\nclass Tweets extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tweets: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = 'https://api.twitter.com/2/tweets/search/recent?query=facialrecognition';\r\n        fetch(url, {mode: 'no-cors'})\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                this.setState({\r\n                    tweets: data.data\r\n                })\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    renderItems() {\r\n        return this.state.tweets.map((item) => (\r\n            <TweetsSingle key={item.id} item={item} />\r\n        ));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <ul>\r\n                {this.renderItems()}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\n"]},"metadata":{},"sourceType":"module"}