{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\Software Development\\\\SD 744-01 Topics in Data Technologies\\\\FaceValue\\\\my-blog\\\\src\\\\pages\\\\TweetFeedPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport Tweet from \"../components/Tweet\";\nimport socketIOClient from \"socket.io-client\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Spinner from \"../components/Spinner\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"add_tweet\":\n      return { ...state,\n        tweets: [action.payload, ...state.tweets],\n        error: null,\n        isWaiting: false,\n        errors: []\n      };\n\n    case \"show_error\":\n      return { ...state,\n        error: action.payload,\n        isWaiting: false\n      };\n\n    case \"add_errors\":\n      return { ...state,\n        errors: action.payload,\n        isWaiting: false\n      };\n\n    case \"update_waiting\":\n      return { ...state,\n        error: null,\n        isWaiting: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst TweetFeed = () => {\n  _s();\n\n  const initialState = {\n    tweets: [],\n    error: {},\n    isWaiting: true\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    tweets,\n    error,\n    isWaiting\n  } = state;\n\n  const streamTweets = () => {\n    let socket;\n\n    if (process.env.NODE_ENV === \"development\") {\n      socket = socketIOClient(\"http://localhost:3000/\");\n    } else {\n      socket = socketIOClient(\"/\");\n    }\n\n    socket.on(\"connect\", () => {});\n    socket.on(\"tweet\", json => {\n      if (json.data) {\n        dispatch({\n          type: \"add_tweet\",\n          payload: json\n        });\n      }\n    });\n    socket.on(\"heartbeat\", data => {\n      dispatch({\n        type: \"update_waiting\"\n      });\n    });\n    socket.on(\"error\", data => {\n      dispatch({\n        type: \"show_error\",\n        payload: data\n      });\n    });\n    socket.on(\"authError\", data => {\n      console.log(\"data =>\", data);\n      dispatch({\n        type: \"add_errors\",\n        payload: [data]\n      });\n    });\n  };\n\n  const reconnectMessage = () => {\n    const message = {\n      title: \"Reconnecting\",\n      detail: \"Please wait while we reconnect to the stream.\"\n    };\n\n    if (error && error.detail) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n          error: error,\n          styleType: \"warning\"\n        }, error.title, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          error: message,\n          styleType: \"success\"\n        }, message.title, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const errorMessage = () => {\n    const {\n      errors\n    } = state;\n\n    if (errors && errors.length > 0) {\n      return errors.map(error => /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        error: error,\n        styleType: \"negative\"\n      }, error.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this));\n    }\n  };\n\n  const waitingMessage = () => {\n    const message = {\n      title: \"Still working\",\n      detail: \"Waiting for new Tweets to be posted\"\n    };\n\n    if (isWaiting) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            error: message,\n            styleType: \"success\"\n          }, message.title, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n  };\n\n  useEffect(() => {\n    streamTweets();\n  }, []);\n\n  const showTweets = () => {\n    if (tweets.length > 0) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(Tweet, {\n          json: tweet\n        }, tweet.data.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this))\n      }, void 0, false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [reconnectMessage(), errorMessage(), waitingMessage(), showTweets()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TweetFeed, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = TweetFeed;\nexport default TweetFeed;\n/*\r\nimport React, {useState, useEffect} from 'react';\r\nimport Tweet from '../components/Tweet';\r\n\r\n\r\nconst TweetFeedPage = () => {\r\n    \r\n    const [tweetInfo, setTweetInfo] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`http://localhost:8000/tweets`);\r\n            const body = await result.json();\r\n            setTweetInfo(body);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n         <>\r\n         <Tweet tweets={tweetInfo}/>\r\n         </>\r\n    );\r\n}\r\n\r\nexport default TweetFeedPage;\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetFeed\");","map":{"version":3,"sources":["E:/Software Development/SD 744-01 Topics in Data Technologies/FaceValue/my-blog/src/pages/TweetFeedPage.jsx"],"names":["React","useEffect","useReducer","Tweet","socketIOClient","ErrorMessage","Spinner","reducer","state","action","type","tweets","payload","error","isWaiting","errors","TweetFeed","initialState","dispatch","streamTweets","socket","process","env","NODE_ENV","on","json","data","console","log","reconnectMessage","message","title","detail","errorMessage","length","map","waitingMessage","showTweets","tweet","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\r\nimport Tweet from \"../components/Tweet\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\nimport Spinner from \"../components/Spinner\";\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"add_tweet\":\r\n      return {\r\n        ...state,\r\n        tweets: [action.payload, ...state.tweets],\r\n        error: null,\r\n        isWaiting: false,\r\n        errors: [],\r\n      };\r\n    case \"show_error\":\r\n      return { ...state, error: action.payload, isWaiting: false };\r\n    case \"add_errors\":\r\n      return { ...state, errors: action.payload, isWaiting: false };\r\n    case \"update_waiting\":\r\n      return { ...state, error: null, isWaiting: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst TweetFeed = () => {\r\n  const initialState = {\r\n    tweets: [],\r\n    error: {},\r\n    isWaiting: true,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const { tweets, error, isWaiting } = state;\r\n\r\n  const streamTweets = () => {\r\n    let socket;\r\n\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      socket = socketIOClient(\"http://localhost:3000/\");\r\n    } else {\r\n      socket = socketIOClient(\"/\");\r\n    }\r\n\r\n    socket.on(\"connect\", () => {});\r\n    socket.on(\"tweet\", (json) => {\r\n      if (json.data) {\r\n        dispatch({ type: \"add_tweet\", payload: json });\r\n      }\r\n    });\r\n    socket.on(\"heartbeat\", (data) => {\r\n      dispatch({ type: \"update_waiting\" });\r\n    });\r\n    socket.on(\"error\", (data) => {\r\n      dispatch({ type: \"show_error\", payload: data });\r\n    });\r\n    socket.on(\"authError\", (data) => {\r\n      console.log(\"data =>\", data);\r\n      dispatch({ type: \"add_errors\", payload: [data] });\r\n    });\r\n  };\r\n\r\n  const reconnectMessage = () => {\r\n    const message = {\r\n      title: \"Reconnecting\",\r\n      detail: \"Please wait while we reconnect to the stream.\",\r\n    };\r\n\r\n    if (error && error.detail) {\r\n      return (\r\n        <div>\r\n          <ErrorMessage key={error.title} error={error} styleType=\"warning\" />\r\n          <ErrorMessage\r\n            key={message.title}\r\n            error={message}\r\n            styleType=\"success\"\r\n          />\r\n          <Spinner />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const errorMessage = () => {\r\n    const { errors } = state;\r\n\r\n    if (errors && errors.length > 0) {\r\n      return errors.map((error) => (\r\n        <ErrorMessage key={error.title} error={error} styleType=\"negative\" />\r\n      ));\r\n    }\r\n  };\r\n\r\n  const waitingMessage = () => {\r\n    const message = {\r\n      title: \"Still working\",\r\n      detail: \"Waiting for new Tweets to be posted\",\r\n    };\r\n\r\n    if (isWaiting) {\r\n      return (\r\n        <>\r\n          <div>\r\n            <ErrorMessage\r\n              key={message.title}\r\n              error={message}\r\n              styleType=\"success\"\r\n            />\r\n          </div>\r\n          <Spinner />\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    streamTweets();\r\n  }, []);\r\n\r\n  const showTweets = () => {\r\n    if (tweets.length > 0) {\r\n      return (\r\n        <>\r\n          {tweets.map((tweet) => (\r\n            <Tweet key={tweet.data.id} json={tweet} />\r\n          ))}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {reconnectMessage()}\r\n      {errorMessage()}\r\n      {waitingMessage()}\r\n      {showTweets()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetFeed;\r\n\r\n\r\n\r\n/*\r\nimport React, {useState, useEffect} from 'react';\r\nimport Tweet from '../components/Tweet';\r\n\r\n\r\nconst TweetFeedPage = () => {\r\n    \r\n    const [tweetInfo, setTweetInfo] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`http://localhost:8000/tweets`);\r\n            const body = await result.json();\r\n            setTweetInfo(body);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n         <>\r\n         <Tweet tweets={tweetInfo}/>\r\n         </>\r\n    );\r\n}\r\n\r\nexport default TweetFeedPage;\r\n*/\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}